{
  "name": "React",
  "order": 5,
  "time": "5 hours",
  "helpRoom": "Help",
  "required": [
    {
      "src": "https://cdnjs.cloudflare.com/ajax/libs/react/16.1.1/umd/react.development.js"
    }
  ],
  "challenges": [
    {
      "id": "587d7dbc367417b2b2512bb1",
      "title": "Create a Simple JSX Element",
      "releasedOn": "December 25, 2017",
      "description": [
        "<strong>Intro:</strong> React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.",
        "React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.",
        "For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: <code>{ 'this is treated as JavaScript code' }</code>. Keep this in mind, since it's used in several future challenges.",
        "However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail.",
        "<hr>",
        "<strong>Instructions:</strong> The current code uses JSX to assign a <code>div</code> element to the constant <code>JSX</code>. Replace the <code>div</code> with an <code>h1</code> element and add the text <code>Hello JSX!</code> inside it."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": [
            "",
            "var jsx = <div></div>;",
            ""
          ]
        }
      },
      "tests": [
        "assert(Enzyme.shallow(jsx).type() === 'h1', 'message: The constant JSX should return an <code>h1</code> element.');",
        "assert(Enzyme.shallow(jsx).contains( 'Hello JSX!'), 'message: The <code>h1</code> tag should include the text <code>Hello JSX!</code>');"
      ],
      "head": [],
      "tail": [],
      "solutions": [
        "const jsx = <h1>Hello JSX!</h1>;"
      ],
      "type": "modern",
      "isRequired": false,
      "translations": {}
    },
    {
      "id": "",
      "title": "Create a Complex JSX Element",
      "releasedOn": "December 25, 2017",
      "description": [
        "The last challenge was a simple example of JSX, but JSX can represent more complex HTML as well.",
        "One important thing to know about nested JSX is that it must return a single element.",
        "This one parent element would wrap all of the other levels of nested elements.",
        "For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.",
        "Here's an example:",
        "",
        "<b>Valid JSX:</b>",
        "",
        "<blockquote>&lt;div&gt;<br>  &lt;p&gt;Paragraph One&lt;/p&gt;<br>  &lt;p&gt;Paragraph Two&lt;/p&gt;<br>  &lt;p&gt;Paragraph Three&lt;/p&gt;<br>&lt;/div&gt;</blockquote>",
        "",
        "<b>Invalid JSX:</b>",
        "<hr>",
        "Define a new constant <code>JSX</code> that renders a <code>div</code> which contains the following elements in order:",
        "An <code>h1</code>, a <code>p</code>, and an unordered list that contains three <code>li</code> items. You can include any text you want within each element.",
        "<strong>Note:</strong>&nbsp;When rendering multiple elements like this, you can wrap them all in parentheses, but it's not strictly required. Also notice this challenge uses a <code>div</code> tag to wrap all the child elements within a single parent element. If you remove the <code>div</code>, the JSX will no longer transpile. Keep this in mind, since it will also apply when you return JSX elements in React components."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": [
            "// write your code here",
            ""
          ]
        }
      },
      "tests": [],
      "head": [],
      "tail": [],
      "solutions": [
        "const JSX = (\n<div>\n  <h1>Hello JSX!</h1>\n  <p>Some info</p>\n  <ul>\n    <li>An item</li>\n    <li>Another item</li>\n    <li>A third item</li>\n  </ul>\n</div>);"
      ],
      "type": "modern",
      "isRequired": false,
      "translations": {}
    },
    {
      "id": "",
      "title": "Render HTML Elements to the DOM",
      "releasedOn": "December 25, 2017",
      "description": [
        "So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.",
        "ReactDOM offers a simple method to render React elements to the DOM which looks like this: <code>ReactDOM.render(componentToRender, targetNode)</code>.",
        "",
        "<ul>",
        "<li>The first argument is the React element or component that you want to render.</li>",
        "<li>The second argument is the DOM node that you want to render the component within.</li>",
        "</ul>",
        "",
        "As you would expect, <code>ReactDOM.render()</code> must be called after the JSX element declarations, just like how you must declare variables before using them.",
        "<hr>",
        "The code editor has a simple JSX component. Use the <code>ReactDOM.render()</code> method to render this component to the page. You can pass defined JSX elements directly in as the first argument and use <code>document.getElementById()</code>",
        "to select the DOM node to render them to. There is a <code>div</code> with <code>id='challenge-node'</code> available for you to use. Make sure you don't change the <code>JSX</code> constant."
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": [
            "const JSX = (",
            "<div>",
            "  <h1>Hello World</h1>",
            "  <p>Lets render this to the DOM</p>",
            "</div>",
            ");",
            "// change code below this line",
            ""
          ]
        }
      },
      "tests": [],
      "head": [],
      "tail": [],
      "solutions": [
        "const JSX = (\n<div>\n  <h1>Hello World</h1>\n  <p>Lets render this to the DOM</p>\n</div>\n);\n// change code below this line\nReactDOM.render(JSX, document.getElementById('challenge-node'));"
      ],
      "type": "modern",
      "isRequired": false,
      "translations": {}
    },
    {
      "id": "",
      "title": "Create a React Component",
      "releasedOn": "December 25, 2017",
      "description": [
        "The other way to define a React component is with the ES6 <code>class</code> syntax. In the following example, <code>Kitten</code> extends <code>React.Component</code>:",
        "",
        "<blockquote>class Kitten extends React.Component {<br>  constructor(props) {<br>    super(props);<br>  }<br><br>  render() {<br>    return (<br>      &lt;h1&gt;Hi&lt;/h1&gt;<br>    );<br>  }<br>}</blockquote>",
        "<hr>",
        "<code>MyComponent</code> is defined in the code editor using class syntax. Finish writing the <code>render</code> method so it returns a <code>div</code> element that contains an <code>h1</code> with the text <code>Hello React!</code>.'"
      ],
      "files": {
        "indexjsx": {
          "key": "indexjsx",
          "ext": "jsx",
          "name": "index",
          "contents": [
            "",
            "class MyComponent extends React.Component {",
            "  constructor(props) {",
            "    super(props);",
            "  }",
            "  render() {",
            "    // change code below this line",
            "",
            "",
            "",
            "    // change code above this line",
            "  }",
            "};"
          ]
        }
      },
      "tests": [],
      "head": [],
      "tail": [],
      "solutions": [
        "\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // change code below this line\n    return (\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n    );\n    // change code above this line\n  }\n};"
      ],
      "type": "modern",
      "isRequired": false,
      "translations": {}
    }
  ]
}